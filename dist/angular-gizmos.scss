//////////////////////////////////
// Color
//////////////////////////////////

$black: #000;
$white: #fff;

$gray1: lighten($black, 10%);
$gray2: lighten($black, 20%);
$gray3: lighten($black, 30%);
$gray4: lighten($black, 40%);
$gray5: lighten($black, 50%);
$gray6: lighten($black, 60%);
$gray7: lighten($black, 70%);
$gray8: lighten($black, 80%);
$gray9: lighten($black, 90%);


$basePercent: 100;
$basePixel: $basePercent/100 * 16;
/*$monospaceFont: "Courier New", Courier, "Lucida Sans Typewriter", "Lucida Typewriter", monospace;*/

$default-font: Geneva, Verdana, Helvetica, Arial, sans-serif;
$statistic-font : 'Helvetica Neue', Helvetica, Arial, sans-serif;


//
// Font mixins
//
@mixin font( $font-size, $line-height:0, $unit:rem ) {
  @if $line-height == 0 {
    $line-height: $font-size;
  }

  font-size: $font-size + $unit;
  line-height: $line-height + $unit;
}


//
// Responsive mixins
//
$breakpoints: (
  480: 480px,
  600: 600px,
  760: 760px,
  960: 960px,
);

// Adds a min-width media query for the given breakpoint name with the
// nested @content.  Can pass in a breakpoint name from the $breakpoints
// map, or an explicit size.
@mixin break-at( $name-or-min-width ) {
  @if map-has-key($breakpoints, $name-or-min-width) {
    $min-width: map-get($breakpoints, $name-or-min-width);
  }
  @else if type-of($name-or-min-width) == 'number' and not unitless($name-or-min-width) {
    $min-width: $name-or-min-width;
  }
  @else {
    @error("No breakpoint named '" + $name-or-min-width + "' in $breakpoints.  Available breakpoints: '" + inspect($breakpoints) + "'.  You can also pass in a value like '500px'.");
  }

  @media only screen and ( min-width: $min-width ) {
    @content;
  }
}

//
// Positioning mixins
//
@mixin vertical-align {
  position: relative;
  top: 50%;
  transform: translateY( -50% );
}

@mixin apply-flexible-height {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  height: auto;
}

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}


// Maintains an aspect ratio in any element, like a div.
// Source: https://css-tricks.com/snippets/sass/maintain-aspect-ratio-mixin/#comment-1592606
// Usage:
//    @include aspect-ratio(16, 9);
//    @include aspect-ratio(.33);
@mixin aspect-ratio($ratio-or-width, $height: null) {
  $padding: if($height, percentage($height/$ratio-or-width), percentage(1/$ratio-or-width));
  &:before { content:''; float: left; padding-bottom: $padding;  }
  &:after  { content:''; display: table; clear: both;  }
}


//
// Misc mixins
//
@mixin triangle( $direction, $color, $size ) {
  @if $direction == "left" {
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    border-top: $size solid transparent;
  }

  @else if $direction == "right" {
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    border-top: $size solid transparent;
  }

  @else if $direction == "up" {
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  }

  @else if $direction == "down" {
    border-right: $size solid transparent;
    border-left: $size solid transparent;
    border-top: $size solid $color;
  }

  height: 0;
  width: 0;
}


// This is a simple sugaring for linear gradients
@mixin gradient( $v1, $v2 ) {
  background-image: linear-gradient( $v1, $v2 );
}

@mixin transparent-gradient( $start, $start-opacity, $end, $end-opacity ) {
  @include gradient(
    rgba( $start, $start-opacity ),
    rgba( $end, $end-opacity )
  );
}




// Default styles for the background-size directive.  Assume that the caller
// wants a something like an <img> that grows to fill its container, but
// `contain` ensures the entire image is visible.  `cover` is another good
// value, it trades off being able to see the entire image for scaling it up
// to fill the container fully.

// Note that if IE supported `object-fit` a normal `<img>` could be used instead.
// http://caniuse.com/#feat=object-fit
[background-image] {
  width: 100%;
  height: 100%;
  background-size: contain;
  background-position: center;
  background-repeat: no-repeat;
}


.topic-ring {
  position: relative;
  width: 35px;
  height: 35px;
 }

 .topic-ring-level {
   position: absolute;
   top: 10px;
   text-align: center;
   width: 35px;
   height: 35px;
   color: $gray7;
   @include font( 0.9 );
 }

